#!/usr/bin/env bash

set -e
source "${BASH_SOURCE%/*}"/lib

usage="$0 [OPTION]... IMAGESDIR [VERSION]

Build the Docker images under the IMAGESDIR directory.
Label each built image with the given VERSION number (default: latest).
The build takes advantage of any reusable layer from previously built images.

You can build individual images by specifying the source image and the image
you wish to build.

Options:

    -h              Show this help message.
    -s IMAGE        Source IMAGE, used as based for the image being built.
    -i IMAGE        Only build IMAGE and create 
    -p              Publish each built image to the GitHub Container Registry
                    (you need to be logged in to ghcr.io with the appropriate
                    permissions for this to work)."

helpflag=
publishflag=

unset imageflag

while getopts hpi: name; do
    case $name in
        h) helpflag=1 ;;
        p) publishflag=1 ;;
        s) sourceimageflag="$OPTARG" ;;
        i) imageflag="$OPTARG" ;;
        *) error "Invalid option. Use the -h flag for more information." ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n $helpflag ]]; then
    echo "$usage"
    exit
fi

if [[ $# -eq 0 ]]; then
    error "Missing IMAGESDIR arguments. Use the -h flag for more information."
fi

if [[ $# -gt 2 ]]; then
    error "Extraneous arguments. Use the -h flag for more information."
fi

if [[ -n "$imageflag" ]] && [[ -z "$sourceimageflag" ]];
then
    error "Missing source image. Use the -h flag for more information."
fi

if [[ -n "$sourceimageflag" ]] && [[ -z "$imageflag" ]];
then
    error "Missing image name. Use the -h flag for more information."
fi

imagesdir="$1"
version="$2"

docker buildx create --use

docker-build() {
    from="$(image-name "$1" "$version")"
    target="$(image-name "$2" "$version")"
    status "Building image '$target'"
    docker buildx build \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg FROM="$from" \
        --cache-from "$(image-name "$2")" \
        --platform linux/amd64,linux/arm64
        --tag "$target" .

    if [[ -n $publishflag ]]; then
        docker image push "$target"
    fi
}

if [[ -n "$imageflag" ]] && [[ -n "$sourceimageflag" ]];
then
    pushd "$imagesdir/$imageflag"
    docker-build "$sourceimageflag" "$imageflag"
    popd
    exit
fi

pushd "$imagesdir"/toolchain
docker-build toolchain toolchain
popd

pushd "$imagesdir"/base
docker-build toolchain base
popd

pushd "$imagesdir"/golang
docker-build base golang
popd

pushd "$imagesdir"/python
docker-build base python
popd

pushd "$imagesdir"/qt
docker-build base qt
popd

pushd "$imagesdir"/rust
docker-build base rust
popd

pushd "$imagesdir"/dotnet6
docker-build toolchain dotnet6
popd

status "Done"
